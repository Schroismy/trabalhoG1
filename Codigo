#include <stdio.h>
#include <stdlib.h>

// DEFINIÇÃO DA ESTRUTURA DO NÓ DA LISTA
typedef struct Node {
    // PONTEIRO PARA OS DADOS(GENÉRICOS)
    void *data;
    // PONTEIRO PARA  O PRÓXIMO NÓ
    struct Node *next;
} Node;

// DEFINIÇÃO DA ESTRUTURA DA LISTA
typedef struct {
    // PONTEIRO PARA O PRIMEIRO NÓ DA LISTA
    Node *head;
    // TAMANHO DOS DADOS A SEREM ARMAZENADOS
    int data_size;
    // FUNÇÃO PARA LIBERAR OS DADOS
    void (free_data)(void);
} Lista;

// FUNÇÃO PARA CRIAR UMA NOVA LISTA
void Lista_new(Lista* lista, int data_size, void (free_data)(void)) {
    // INICIALIZA O PONTEIRO PARA O PRIMEIRO NÓ COMO NULO.
    lista->head = NULL;
    // DEFINE O TAMANHO DOS DADOS A SEREM ARMAZENADOS.
    lista->data_size = data_size;
    // DEFINE A FUNÇÃO PARA LIBERAR OS DADOS
    lista->free_data = free_data;
}

//FUNÇÃO PARA EXCLUIR A LISTA
NO* remover(No **lista, int num){
    //*aux= PONTIERO AUXILIAR
    No aux, remover = NULL;
    //REMOVER O NÓ
    if(*lista){
        if((*lista)->valor == num){
         remover =  *lista;
         *lista = remover-> proximo;
        }
        else {
            aux = * lista;
            while(aux-> próximo && aux-> proximo->valor != num)
                aux = aux->proximo;
            if(aux->proximo){
                //CRIANDO UM PONTEIRO PARA O PROXIMO(AUX-> REMOVER, E NÃO O PROXIMO)
                remover = aux->proximo;
                aux->proximo = remover->proximo;
            }
        }
    }
    No
    return remover;
}


// EXEMPLO DE USO DA FUNÇÃO LISTA_NEW
int main() {

    // DECLARAÇÃO DE UMA LISTA
    Lista lista;
    // CRIA UMA NOVA LISTA PARA ARMAZENAR INTEIROS
    Lista_new(&lista, sizeof(int), free);

    // OUTRAS OPERAÇÕES PODEM SER REALIZADAS COM A LISTA AQUI

    return 0;
}
